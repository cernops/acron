#!/usr/bin/python3
# pylint: disable=line-too-long
#
# (C) Copyright 2019-2021 CERN
#
# This  software  is  distributed  under  the  terms  of  the  GNU  General  Public  Licence  version  3
# (GPL  Version 3), copied verbatim in the file "COPYING" /copied verbatim below.
#
# In applying this licence, CERN does not waive the privileges and immunities granted to it
# by virtue of its status as an Intergovernmental Organization or submit itself to any jurisdiction.
#
'''Acron file backend credentials getter'''

import argparse
import os
import sys
import pkg_resources
import yaml
from acron.errors import ERRORS
from acron.exceptions import CredsNoFileError, GPGError
from acron.utils import gpg_decrypt_file

with open('/etc/acron/server.config', 'r') as config_file:
    CONFIG = yaml.safe_load(config_file)
with open(os.path.join(CONFIG['CREDS']['CONFIG'], 'file.config'), 'r') as config_file:
    CONFIG['CREDS'].update(yaml.safe_load(config_file))

__author__ = 'Philippe Ganz (CERN)'
__credits__ = ['Philippe Ganz (CERN)', 'Ulrich Schwickerath (CERN)',]
__maintainer__ = 'Philippe Ganz (CERN)'
__email__ = 'philippe.ganz@cern.ch'
__status__ = 'Development'


def get_creds(username):
    '''
    Retrieve credentials from the shared storage.

    :param username: user to fetch the credentials for
    :returns:        OK if creds are available, NO_VALID_CREDS if no valid creds are found, BACKEND_ERROR else
    '''
    keytab = os.path.join(CONFIG['CREDS']['CACHE'], username + '.keytab')
    keytab_encrypted = os.path.join(CONFIG['CREDS']['LOCATION'], username + '.keytab.gpg')
    status_code = ERRORS['OK']
    try:
        if not os.path.isfile(keytab_encrypted):
            if os.path.isfile(keytab):
                os.remove(keytab)
            raise CredsNoFileError
        if ((os.path.isfile(keytab) and os.path.getmtime(keytab) < os.path.getmtime(keytab_encrypted)) or
                not os.path.isfile(keytab)):
            if os.path.isfile(keytab):
                os.remove(keytab)
            gpg_decrypt_file(keytab_encrypted, keytab, CONFIG['CREDS']['GPG_BINARY_PATH'],
                             CONFIG['CREDS']['GPG_HOME'], CONFIG['CREDS']['GPG_PASSPHRASE_FILE'])
            os.chmod(keytab, 0o0640)
        sys.stdout.write(keytab)

    except CredsNoFileError:
        sys.stderr.write('No valid credentials were found, please upload new ones.' + '\n')
        status_code = ERRORS['NO_VALID_CREDS']
    except GPGError as error:
        sys.stderr.write('Could not decypher the credentials: ' + str(error) + '\n')
        status_code = ERRORS['BACKEND_ERROR']

    return status_code


def main():
    '''return the credentials'''
    parser = argparse.ArgumentParser(prog='get_creds', description='Acron credential getter.')
    parser.add_argument(
        '-v', '--version', action='version',
        version=pkg_resources.require('acron')[0].version)
    parser.add_argument('username', help='User to get the credentials for.')
    args = parser.parse_args()

    return get_creds(args.username)

if __name__ == "__main__":
    sys.exit(main())
