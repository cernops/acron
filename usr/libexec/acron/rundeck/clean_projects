#!/usr/bin/python3
#
# (C) Copyright 2019-2020 CERN
#
# This  software  is  distributed  under  the  terms  of  the  GNU  General  Public  Licence  version  3
# (GPL  Version 3), copied verbatim in the file "COPYING" /copied verbatim below.
#
# In applying this licence, CERN does not waive the privileges and immunities granted to it
# by virtue of its status as an Intergovernmental Organization or submit itself to any jurisdiction.
#
'''Acron job cleaning utility for Rundeck backend'''

import argparse
import sys
import pkg_resources
import yaml
from acron.errors import ERRORS
from acron.exceptions import SchedulerError
from acron.server.backend.scheduler.rundeck import Rundeck
from acron.server.utils import ldap_groups_expansion

with open('/etc/acron/server.config', 'r') as config_file:
    config = yaml.safe_load(config_file)

__author__ = 'Philippe Ganz (CERN)'
__credits__ = ['Philippe Ganz (CERN)', 'Ulrich Schwickerath (CERN)', 'Rodrigo Bermudez Schettino (CERN)']
__maintainer__ = 'Rodrigo Bermudez Schettino (CERN)'
__email__ = 'rodrigo.bermudez.schettino@cern.ch'
__status__ = 'Development'


def clean_projects():
    '''
    Check for projects in the LDAP group and remove unlisted projects from the backend
    '''
    status_code = ERRORS['OK']
    try:
        projects_current = Rundeck.get_projects(config)
        projects_goal = ldap_groups_expansion(config['PROJECTS_GROUP'])
        projects_to_add = projects_goal - projects_current
        projects_to_remove = projects_current - projects_goal

        for project in projects_to_add:
            Rundeck.create_project(project, config)
        for project in projects_to_remove:
            Rundeck.delete_project(project, config)

    except SchedulerError:
        sys.stderr.write("A problem occurred with the backend.")
        status_code = ERRORS["BACKEND_ERROR"]
    return status_code


if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog='clean_projects',
                                     description='Acron project cleaning tool for Rundeck backend.')
    parser.add_argument(
        '-v', '--version', action='version',
        version=pkg_resources.require('acron')[0].version)
    args = parser.parse_args()

    sys.exit(clean_projects())
