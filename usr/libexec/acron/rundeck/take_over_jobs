#!/usr/bin/python3
# pylint: disable=line-too-long
#
# (C) Copyright 2019-2020 CERN
#
# This  software  is  distributed  under  the  terms  of  the  GNU  General  Public  Licence  version  3
# (GPL  Version 3), copied verbatim in the file "COPYING" /copied verbatim below.
#
# In applying this licence, CERN does not waive the privileges and immunities granted to it
# by virtue of its status as an Intergovernmental Organization or submit itself to any jurisdiction.
#
'''Acron failover utility for Rundeck backend'''

import argparse
import logging
import os
import sys
import syslog
import pkg_resources
import yaml
from acron.constants import ReturnCodes
from acron.exceptions import SchedulerError
from acron.server.backend.scheduler.rundeck import Rundeck

with open('/etc/acron/server.config', 'r') as config_file:
    CONFIG = yaml.safe_load(config_file)
with open(os.path.join(CONFIG['SCHEDULER']['CONFIG'], 'rundeck.config'), 'r') as config_file:
    CONFIG['SCHEDULER'].update(yaml.safe_load(config_file))
with open(os.path.join(CONFIG['SCHEDULER']['CONFIG'], 'rundeck/health_check.config'), 'r') as config_file:
    CONFIG['SCHEDULER'].update(yaml.safe_load(config_file))

__author__ = 'Philippe Ganz (CERN)'
__credits__ = ['Philippe Ganz (CERN)', 'Ulrich Schwickerath (CERN)',
               'Rodrigo Bermudez Schettino (CERN)']
__maintainer__ = 'Rodrigo Bermudez Schettino (CERN)'
__email__ = 'rodrigo.bermudez.schettino@cern.ch'
__status__ = 'Development'

def log_check(level, message):
    '''
    Logs the execution summary of the ssh run.

    :param message: Message line to log
    :param level:   The level of the log message
    '''
    logging.basicConfig(filename=CONFIG['SCHEDULER']['HEALTH_CHECK_LOG_FILE'], level='INFO',
                        format='%(asctime)s %(levelname)-8s  %(message)s',
                        datefmt='%Y-%m-%d %H:%M:%S')
    logging.log(level, message)
    syslog.syslog(message)


def check_server(host):
    '''
    Check for other hosts
    '''
    status_code = ReturnCodes.OK
    hosts = CONFIG['SCHEDULER']['SERVER_LIST']
    try:
        if host in CONFIG['SCHEDULER']['SERVER_LIST']:
            log_check(logging.INFO, f'Taking over jobs from {host}... ')
            projects = Rundeck.projects_on_server(hosts[host]['UUID'], CONFIG)
            for project in projects:
                log_check(logging.INFO, 'Taking over project '+project)
                Rundeck.take_over_jobs(hosts[host]['UUID'], CONFIG, project)
            log_check(logging.INFO, 'successfully taken over all the jobs.')
        else:
            sys.stderr.write("%s is not part of this service" % host)
            sys.exit(1)
    except SchedulerError as error:
        sys.stderr.write(f'A problem occurred with the backend: {error}\n')
        log_check(logging.ERROR, f'takeover failed! {error}')
        status_code = ReturnCodes.BACKEND_ERROR
    return status_code

def main():
    """ get args and take over the jobs """
    parser = argparse.ArgumentParser(prog='health_check',
                                     description='Acron project health check utility for Rundeck backend.')
    parser.add_argument(
        '-v', '--version', action='version',
        version=pkg_resources.require('acron')[0].version)
    parser.add_argument('-s', '--server',
                        action='store',
                        dest='server',
                        default=None,
                        help='Migrate jobs from that server to the current one')
    args = parser.parse_args()
    return check_server(str(args.server))

if __name__ == "__main__":
    sys.exit(main())
