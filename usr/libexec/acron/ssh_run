#!/usr/bin/python3
# pylint: disable=line-too-long
#
# (C) Copyright 2019-2021 CERN
#
# This  software  is  distributed  under  the  terms  of  the  GNU  General  Public  Licence  version  3
# (GPL  Version 3), copied verbatim in the file "COPYING" /copied verbatim below.
#
# In applying this licence, CERN does not waive the privileges and immunities granted to it
# by virtue of its status as an Intergovernmental Organization or submit itself to any jurisdiction.
#
'''Acron SSH launcher'''

import argparse
import datetime
import logging
import os
from subprocess import Popen, PIPE, STDOUT
import sys
import time
import syslog
import yaml
import pkg_resources
from acron.constants import ReturnCodes
from acron.exceptions import (CredsError, CredsNoFileError, KinitError,
                              SSHFailureError, JobExecutionError)
from acron.utils import krb_init_keytab, krb_check_keytab, krbcc_is_valid
from acron.notifications import email_user

__author__ = 'Philippe Ganz (CERN)'
__credits__ = ['Philippe Ganz (CERN)', 'Ulrich Schwickerath (CERN)',
               'Rodrigo Bermudez Schettino (CERN)']
__maintainer__ = 'Rodrigo Bermudez Schettino (CERN)'
__email__ = 'rodrigo.bermudez.schettino@cern.ch'
__status__ = 'Development'

with open('/etc/acron/server.config', 'r') as config_file:
    CONFIG = yaml.safe_load(config_file)
with open(os.path.join(CONFIG['CREDS']['CONFIG'], 'file.config'), 'r') as config_file:
    CONFIG['CREDS'].update(yaml.safe_load(config_file))

logging.basicConfig(filename=CONFIG['EXECUTIONS_LOG_FILE'], level='INFO',
                    format='%(asctime)s %(levelname)-8s  %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S')


def init_creds_external_script(username, realm=None):
    '''
    Initializes credentials using and external script.

    :param username: name of the user to initialize the credentials for
    :param realm:    authentication domain
    :raises:         CredsError if the external script fails
    '''
    process = Popen([CONFIG['CREDS']['FAILOVER_SCRIPT'], username, realm],
                    universal_newlines=True, stdout=PIPE, stderr=PIPE)
    _, err = process.communicate()
    if process.returncode != 0:
        sys.stderr.write(err)
        raise CredsError(err)


def get_creds_file(username):
    ''' unpack and return the credential cache file name
    :param username: name of the user to initialize the credentials for
    :returns:        output of the comment
    :raises:         CredsNoFileError
    :raises:         CredsError
    '''
    process = Popen(['/usr/libexec/acron/get_creds', username],
                    universal_newlines=True, stdout=PIPE, stderr=PIPE)
    out, err = process.communicate()
    if process.returncode != 0:
        sys.stderr.write(err)
        if process.returncode == ReturnCodes.NO_VALID_CREDS:
            if CONFIG['CREDS']['ALLOW_NO_KEYTAB'] and CONFIG['CREDS']['FAILOVER_SCRIPT']:
                init_creds_external_script(username)
            else:
                raise CredsNoFileError(err)
        else:
            raise CredsError(err)
    return out


def init_creds(username, target):
    '''
    Get the user's credentials and get a Kerberos ticket.

    :param username: name of the user to initialize the credentials for
    :param target:   hostname of the executing node
    :raises:         CredsNoFileError if credentials are not found
    :raises:         CredsError if GPG decryption fails
    '''
    try:
        flavor = CONFIG['KRB_CLIENTS_FLAVOR']
    except KeyError:
        flavor = 'MIT'
    if CONFIG['CREDS']['ALLOW_NO_KEYTAB'] and CONFIG['CREDS']['FAILOVER_SCRIPT']:
        init_creds_external_script(username)
        return None
    try:
        creds_file = get_creds_file(username)
        realms = krb_check_keytab(creds_file, flavor)
        if len(realms) > 1:
            # if there are several Realms we need to check which one the target supports
            # in that case we launch a pilot command first and see if it works on the target
            # In case of success we use that one.
            for realm in realms:
                cachefile = "/tmp/krb5cc_"+username+"_"+realm
                if krbcc_is_valid(cachefile):
                    logging.debug("Cache file %s exists and is valid", cachefile)
                else:
                    try:
                        krb_init_keytab(creds_file,
                                        username+'@'+realm,
                                        cachefile=cachefile)
                        launch_command(username, realm, target,
                                       '/bin/true', retries=1, log_attempts=False)
                        logging.info(
                            "Connection test succeeded for realm %s", realm)
                        return realm
                    except (KinitError, SSHFailureError) as error:
                        pass
            return None
        realm = realms[0]
        cachefile = "/tmp/krb5cc_"+username+"_"+realm
        if krbcc_is_valid(cachefile):
            logging.debug("Cache file %s exists and is valid", cachefile)
        else:
            krb_init_keytab(creds_file, username+'@'+realm,
                            cachefile="/tmp/krb5cc_"+username+"_"+realm)
        return realm
    except CredsNoFileError as error:
        logging.error(str(error).rstrip()+" for user "+username)
        raise CredsNoFileError(error)
    except (CredsError) as error:
        logging.error(str(error).rstrip()+" for user "+username)
        raise CredsError(error)


def log_execution(username, target, command, duration, return_code):
    '''
    Logs the execution summary of the ssh run.

    :param username:    Name of the running user
    :param target:      Target of the ssh command
    :param command:     Command to launch on the target
    :param duration:    The execution time
    :param return_code: The return code of the ssh call
    '''
    message = f'{username} @ {target} returned {return_code} after {duration} seconds. Command: {command}'
    logging.info(message)
    syslog.syslog(message)


# pylint: disable=too-many-arguments
def launch_command(username, realm, target, command, retries=3, log_attempts=True):
    '''
    Launch an ssh connection in name of the user.

    :param username: Name of the running user
    :param target:   Target of the ssh command
    :param command:  Command to launch on the target
    :retries:        Number of retries, defaults to 3
    :log_attempts:   Log the attempts or not
    :raises:         SSHFailureError if the ssh connection failed
    '''
    cachefile = "/tmp/krb5cc_"+username+"_"+realm

    logging.info('Launch command %s for user %s using %s in realm %s',
                 command, username, cachefile, realm)

    # setup environment for ssh call
    execenv = os.environ.copy()
    execenv["KRB5CCNAME"] = cachefile
    try:
        timeout = CONFIG['IDLE_TIMEOUT']
        execenv["TMOUT"] = str(timeout)
        execenv["autologout"] = str(int(timeout/60))
    except KeyError:
        pass

    retc = 1
    attempt = 0
    while (retc != 0) and (attempt < retries):
        attempt += 1
        process = Popen(['/usr/bin/ssh',
                         '-o', 'UserKnownHostsFile=/dev/null',
                         '-o', 'StrictHostKeyChecking=no',
                         '-o', 'LogLevel=error',
                         '-o', 'GSSAPIDelegateCredentials=yes',
                         '-o', 'BatchMode=yes',
                         username + '@' + target, command],
                        universal_newlines=True,
                        stdout=PIPE,
                        stderr=STDOUT,
                        env=execenv)
        out, _ = process.communicate()
        if log_attempts:
            sys.stdout.write(out + '\n')
        retc = process.returncode

        if retc != 0 and attempt < retries:
            logging.info(
                f'Connection attempt no. {attempt} to {target} failed with exit code {retc},' +
                f'{retries} retries left. Retrying in 5s...')
            time.sleep(5)

    error_msg_postfix = f'failed with exit code {retc}. Output:\n{out}'

    # Exit code 255 is returned when SSH connection fails
    # Source: https://tldp.org/LDP/abs/html/exitcodes.html#AEN23549
    if retc == 255:
        logging.error('SSH command %s', error_msg_postfix)
        raise SSHFailureError(retc, out)

    if retc != 0:
        logging.error('Execution of job command %s', error_msg_postfix)
        raise JobExecutionError(retc, out)

    return out


def run_ssh(job_id, username, target, command):
    '''
    Get Kerberos ticket for the user and launched the command on the target.

    :param job_id:   Name of the job to run
    :param username: Name of the running user
    :param target:   Target of the ssh command
    :param command:  Command to launch on the target
    '''
    status_code = ReturnCodes.OK
    start = time.time()
    realm = init_creds(username, target)
    if realm is not None:
        try:
            cmd_output = launch_command(username, realm, target, command)
            output = cmd_output
        except (CredsNoFileError, KinitError) as error:
            status_code = ReturnCodes.NO_VALID_CREDS
            output = str(error)
        except CredsError as error:
            status_code = ReturnCodes.BACKEND_ERROR
            output = str(error)
        except SSHFailureError as error:
            status_code = ReturnCodes.SSH_ERROR
            output = str(error)
        except JobExecutionError as error:
            status_code = ReturnCodes.USER_ERROR
            output = str(error)

        log_execution(username, target, command,
                      time.time() - start, status_code)

        if not cmd_output or cmd_output == '':
            logging.debug(
                'Command %s on %s@%s produced no output. Skipping email notification',
                command, username, target)
            return status_code

        subject = f'Acron job {job_id}'
        body = (f'Job {job_id}: {username}@{target} {command}' +
                f' returned {str(status_code)}, ')

        # Inform user in email subject that job failed
        if status_code != ReturnCodes.OK:
            subject += ' failed'

        # Customize email body depending on outcome
        if status_code == ReturnCodes.SSH_ERROR:
            body += f'failed to connect to target {target}'
        elif status_code == ReturnCodes.USER_ERROR:
            body += (f' failed during execution of the command.\n' +
                     'Please ensure that the command exits with return code 0 ' +
                     'and update your job accordingly.')
        else:
            body += ' producing the following output:' + '\n\n' + output

        subject += f' on {target} at {str(datetime.datetime.now())}'
        email_user(username, subject, body)

    return status_code


def main():
    """parse arguments and run ssh command"""
    parser = argparse.ArgumentParser(
        prog='get_creds', description='Acron ssh launcher.')
    parser.add_argument(
        '-v', '--version', action='version',
        version=pkg_resources.require('acron')[0].version)
    parser.add_argument('job_id', help='Name of the job to launch.')
    parser.add_argument('username', help='User to launch the command for.')
    parser.add_argument('target', help='Hostname of the executing node.')
    parser.add_argument('command', help='Command to execute on the target.')
    args = parser.parse_args()
    return run_ssh(args.job_id, args.username, args.target, args.command)


if __name__ == "__main__":
    sys.exit(main())
